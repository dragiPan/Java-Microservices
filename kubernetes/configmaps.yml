apiVersion: v1
kind: ConfigMap
metadata:
  name: microservice-configmap
data:
  SPRING_PROFILES_ACTIVE: "prod"
  SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
  EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"
  CONFIGSERVER_APPLICATION_NAME: "configserver"
  EUREKA_APPLICATION_NAME: "eurekaserver"
  ACCOUNTS_APPLICATION_NAME: "accounts"
  LOANS_APPLICATION_NAME: "loans"
  CARDS_APPLICATION_NAME: "cards"
  GATEWAYSERVER_APPLICATION_NAME: "gatewayserver"
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_ADMIN_PASSWORD: "admin"
  SPRING_DATASOURCE_USERNAME: "root"
  SPRING_DATASOURCE_PASSWORD: "root"
  SPRING_DATASOURCE_DRIVER_CLASS_NAME: "com.mysql.jdbc.Driver"
  SPRING_RABBITMQ_HOST: "rabbitmq"
  SPRING_RABBITMQ_PORT: "5672"
  SPRING_RABBITMQ_USERNAME: "guest"
  SPRING_RABBITMQ_PASSWORD: "guest"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"
  OTEL_RESOURCE_ATTRIBUTES: "service.name=${OTEL_SERVICE_NAME},deployment.environment=prod"
  OTEL_METRICS_EXPORTER: "otlp"
  OTEL_LOGS_EXPORTER: "otlp"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-config
data:
  tempo.yml: |
    server:
      http_listen_port: 3100

    distributor:
      receivers:
        otlp:
          protocols:
            grpc:
            http:

    ingester:
      trace_idle_period: 10s
      max_block_bytes: 1_000_000
      max_block_duration: 5m

    compactor:
      compaction:
        compaction_window: 1h
        max_compaction_objects: 1_000_000
        block_retention: 1h
        compacted_block_retention: 10m

    storage:
      trace:
        backend: s3
        s3:
          endpoint: minio.default.svc.cluster.local:9000
          access_key: loki
          secret_key: supersecret
          bucket: tempo-traces
          insecure: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasource
data:
  datasource.yml: |
    apiVersion: 1
    deleteDatasources:
      - name: Prometheus
      - name: Loki
      - name: Tempo

    datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        url: http://prometheus:9090
        access: proxy
        orgId: 1
        basicAuth: false
        isDefault: false
        version: 1
        editable: true
        jsonData:
          httpMethod: GET

      - name: Loki
        type: loki
        uid: loki
        access: proxy
        orgId: 1
        editable: true
        url: http://gateway:3100
        jsonData:
          httpHeaderName1: "X-Scope-OrgID"
          derivedFields:
            - datasourceUid: tempo
              matcherRegex: "\\[.+,(.+),.+\\]"
              name: TraceID
              url: '$${__value.raw}'
        secureJsonData:
          httpHeaderValue1: "tenant1"

      - name: Tempo
        type: tempo
        uid: tempo
        url: http://tempo:3100
        access: proxy
        orgId: 1
        basicAuth: false
        isDefault: false
        version: 1
        editable: true
        jsonData:
          httpMethod: GET
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
data:
  loki-config.yml: |
    server:
      http_listen_address: 0.0.0.0
      http_listen_port: 3100

    memberlist:
      join_members:
        - "loki-read.default.svc.cluster.local"
        - "loki-write.default.svc.cluster.local"
        - "backend.default.svc.cluster.local"
      dead_node_reclaim_time: 30s
      gossip_to_dead_nodes_time: 15s
      left_ingesters_timeout: 30s
      bind_addr: ['0.0.0.0']
      bind_port: 7946
      gossip_interval: 2s

    schema_config:
      configs:
        - from: 2021-08-01
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: index_
            period: 24h

    common:
      path_prefix: /loki
      replication_factor: 1
      compactor_address: http://backend:3100
      storage:
        s3:
          endpoint: http://minio.default.svc.cluster.local:9000
          insecure: true
          bucketnames: loki-data
          access_key_id: loki
          secret_access_key: supersecret
          s3forcepathstyle: true

    ingester:
      lifecycler:
        address: 0.0.0.0
        ring:
          kvstore:
            store: memberlist
          replication_factor: 1

    ruler:
      storage:
        s3:
          bucketnames: loki-ruler
          endpoint: http://minio.default.svc.cluster.local:9000
          insecure: true
          access_key_id: loki
          secret_access_key: supersecret
          s3forcepathstyle: true

    compactor:
      working_directory: /tmp/compactor
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 5s
      evaluation_interval: 5s

    scrape_configs:
      - job_name: 'accounts'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: [ 'accounts:8080' ]
      - job_name: 'loans'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: [ 'loans:8090' ]
      - job_name: 'cards'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: [ 'cards:9090' ]
      - job_name: 'gatewayserver'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: [ 'gatewayserver:8072' ]
      - job_name: 'eurekaserver'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: [ 'eurekaserver:8070' ]
      - job_name: 'configserver'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: [ 'configserver:8071' ]
      - job_name: 'prometheus'
        static_configs:
          - targets: [ 'localhost:9091' ]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
data:
  config.alloy: |
    discovery.docker "flog_scrape" {
      host             = "unix:///var/run/docker.sock"
      refresh_interval = "5s"
    }

    discovery.relabel "flog_scrape" {
      targets = []

      rule {
        source_labels = ["__meta_docker_container_name"]
        regex         = "/(.*)"
        target_label  = "container"
      }
    }

    loki.source.docker "flog_scrape" {
      host             = "unix:///var/run/docker.sock"
      targets          = discovery.docker.flog_scrape.targets
      forward_to       = [loki.write.default.receiver]
      relabel_rules    = discovery.relabel.flog_scrape.rules
      refresh_interval = "5s"
    }

    loki.write "default" {
      endpoint {
        url       = "http://gateway:3100/loki/api/v1/push"
        tenant_id = "tenant1"
      }
      external_labels = {}
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-config
data:
  nginx.conf: |
    user  nginx;
    worker_processes  5;  ## Default: 1

    events {
      worker_connections   1000;
    }

    http {
      resolver 127.0.0.11;

      server {
        listen             3100;

        location = / {
          return 200 'OK';
          auth_basic off;
        }

        location = /api/prom/push {
          proxy_pass       http://write:3100$request_uri;
        }

        location = /api/prom/tail {
          proxy_pass       http://read:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }

        location ~ /api/prom/.* {
          proxy_pass       http://read:3100$request_uri;
        }

        location = /loki/api/v1/push {
          proxy_pass       http://write:3100$request_uri;
        }

        location = /loki/api/v1/tail {
          proxy_pass       http://read:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }

        location ~ /loki/api/.* {
          proxy_pass       http://read:3100$request_uri;
        }
      }
    }
